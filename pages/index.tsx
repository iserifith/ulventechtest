import { FC, useEffect } from "react";
import axios from "axios";
import Head from "next/head";
import Image from "next/image";
import AppBar from "@mui/material/AppBar";
import Box from "@mui/material/Box";
import Toolbar from "@mui/material/Toolbar";
import Typography from "@mui/material/Typography";
import styles from "../styles/Home.module.css";
import {
    Paper,
    TextField,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Container,
    Button,
    Alert,
} from "@mui/material";
import { fieldValue, postData, setFieldValue } from "../src/app.slice";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../src/store";
import FieldBox from "../src/shared/FieldBox";

interface IHomeProps {
    data: any;
}

const Home: FC<IHomeProps> = (props) => {
    const appState = useSelector((state: RootState) => state.app);
    const dispatch = useDispatch();

    const _setFieldValue = (args: fieldValue) => dispatch(setFieldValue(args));

    useEffect(() => {
        props.data.data.map((d: fieldValue, i: number) => {
            if (i === 3) {
                dispatch(
                    setFieldValue({
                        label: "generatedStringField",
                        value: {
                            label: d.fieldName,
                            value: d.value,
                        },
                    })
                );
            } else {
                dispatch(
                    setFieldValue({
                        label: d.fieldName,
                        value: d.value,
                    })
                );
            }
        });
    }, [props, dispatch]);

    const isLoading = appState.status === "loading";

    return (
        <div>
            <Head>
                <title>Dynamic Form</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <AppBar position='static'>
                <Toolbar variant='dense'>
                    <Typography variant='h6' color='inherit' component='div'>
                        Dynamic Form
                    </Typography>
                </Toolbar>
            </AppBar>

            <Container>
                <Box
                    padding='20px'
                    margin='5px'
                    display='flex'
                    flexDirection='column'
                >
                    <Paper>
                        <FieldBox>
                            <TextField
                                disabled={isLoading}
                                label='First Name'
                                variant='outlined'
                                value={appState.firstName}
                                onChange={(e) =>
                                    _setFieldValue({
                                        label: "firstName",
                                        value: e.target.value,
                                    })
                                }
                            />
                        </FieldBox>
                        <FieldBox>
                            <TextField
                                disabled={isLoading}
                                label='Last Name'
                                variant='outlined'
                                value={appState.lastName}
                                onChange={(e) =>
                                    _setFieldValue({
                                        label: "lastName",
                                        value: e.target.value,
                                    })
                                }
                            />
                        </FieldBox>
                        <FieldBox>
                            <TextField
                                disabled={isLoading}
                                label='Email Address'
                                variant='outlined'
                                value={appState.emailAddress}
                                onChange={(e) =>
                                    _setFieldValue({
                                        label: "emailAddress",
                                        value: e.target.value,
                                    })
                                }
                            />
                        </FieldBox>
                        <FieldBox>
                            <TextField
                                disabled={isLoading}
                                label={appState.generatedStringField.label}
                                variant='outlined'
                                value={appState.generatedStringField.value}
                                onChange={(e) =>
                                    _setFieldValue({
                                        label: "generatedStringField",
                                        value: {
                                            label: appState.generatedStringField
                                                .label,
                                            value: e.target.value,
                                        },
                                    })
                                }
                            />
                        </FieldBox>
                        <FieldBox>
                            <FormControl fullWidth>
                                <InputLabel>Gender</InputLabel>
                                <Select
                                    disabled={isLoading}
                                    label='Gender'
                                    value={appState.gender}
                                    onChange={(e) =>
                                        _setFieldValue({
                                            label: "gender",
                                            value: e.target.value,
                                        })
                                    }
                                >
                                    <MenuItem value='male'>Male</MenuItem>
                                    <MenuItem value='female'>Female</MenuItem>
                                    <MenuItem value='other'>Other</MenuItem>
                                </Select>
                            </FormControl>
                        </FieldBox>
                        <FieldBox>
                            <TextField
                                disabled={isLoading}
                                label='Age'
                                variant='outlined'
                                type='number'
                                value={appState.age}
                                onChange={(e) =>
                                    _setFieldValue({
                                        label: "age",
                                        value: e.target.value,
                                    })
                                }
                            />
                        </FieldBox>
                        <FieldBox>
                            <TextField
                                disabled={isLoading}
                                label='Testimonial'
                                variant='outlined'
                                multiline
                                rows='4'
                                value={appState.testimonial}
                                onChange={(e) =>
                                    _setFieldValue({
                                        label: "testimonial",
                                        value: e.target.value,
                                    })
                                }
                            />
                        </FieldBox>
                        <FieldBox>
                            <Button
                                onClick={() => {
                                    dispatch(postData());
                                }}
                                disabled={isLoading}
                            >
                                Submit
                            </Button>
                            {appState.error && (
                                <Alert severity='error'>{appState.error}</Alert>
                            )}
                        </FieldBox>
                    </Paper>
                </Box>
                <div style={{ width: "100%" }}>
                    <Box
                        component='span'
                        sx={{
                            display: "div",
                            p: 1,
                            m: 1,
                            border: "1px solid",
                            borderColor: (theme) =>
                                theme.palette.mode === "dark"
                                    ? "grey.800"
                                    : "grey.300",
                            borderRadius: 2,
                            fontSize: "0.8rem",
                            fontWeight: "700",
                        }}
                    >
                        <pre>
                            <code>{JSON.stringify(appState, null, 1)}</code>
                        </pre>
                    </Box>
                </div>
            </Container>

            <footer className={styles.footer}>
                <a
                    href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
                    target='_blank'
                    rel='noopener noreferrer'
                >
                    Powered by{" "}
                    <span className={styles.logo}>
                        <Image
                            src='/vercel.svg'
                            alt='Vercel Logo'
                            width={72}
                            height={16}
                        />
                    </span>
                </a>
            </footer>
        </div>
    );
};

export async function getServerSideProps() {
    const { data } = await axios.get("api/form", {
        baseURL: process.env.NEXT_PUBLIC_API_BASE_URL,
    });
    return { props: { data } };
}

export default Home;
